CMAKE_MINIMUM_REQUIRED(VERSION 3.1.3)
# == START Minimum version requirement list ==
# 3.0 for versioning inside of project()
# 3.1 for set(THREADS_PREFER_PTHREAD_FLAG ON)
# 3.1.3 for CMAKE_CXX_STANDARD
# EVENTUALLY: 3.7.2 for CMAKE_FIND_PACKAGE_SORT_ORDER and CMAKE_FIND_PACKAGE_SORT_DIRECTION
# EVENTUALLY: 3.9 for the addition of a DESCRIPTION to project()
# == END Minimum version requirement list ==
#
# For cross-compiling, read https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-toolchain

# Get version string from constants.hpp and feed it into the project var
file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/coin/include/coin/constants.hpp" VCASH_VERSION)
string(REGEX REPLACE ".*version_string = \"([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+).*"
"\\1.\\2.\\3.\\4" VCASH_VERSION "${VCASH_VERSION}")

message(STATUS "Starting build of Vcash v${VCASH_VERSION}")
project(Vcash VERSION ${VCASH_VERSION} LANGUAGES C CXX)

# Optional build flag
option(WITH_INCOMPATIBLE_BDB "Enables building with a Berkeley DB v5 minimum instead of v6 minimum." OFF)

# Build options for multi-config (aka Windows)
IF(CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Available build types." FORCE)
ENDIF()
# Default to a release build if nothing is specified -- single-config (aka Unix)
IF(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
ENDIF()

# Require/Build for C++11
# Consider changing to target_compile_features in the future. Links below for feature lists...
# https://cmake.org/cmake/help/latest/prop_gbl/CMAKE_C_KNOWN_FEATURES.html#prop_gbl:CMAKE_C_KNOWN_FEATURES
# https://cmake.org/cmake/help/latest/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#prop_gbl:CMAKE_CXX_KNOWN_FEATURES
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

<<<<<<< HEAD
# Dependency versions
set(OPENSSL_MIN_VER "1.0.2") # EXACT | Do not set letter (the "status" version)
=======
# Dependency versions...
set(OPENSSL_MIN_VER "1.0.1") # Minimum | Do not set the letter ("status") version
# TODO: Remove OPENSSL_MAX_VER when 1.1.x is in master branch
set(OPENSSL_MAX_VER "1.0.2") # Maximum | Do not set the letter ("status") version
>>>>>>> 5fbd9dc... Change OpenSSL min ver to 1.0.1, remove unnecessary PPA
set(BOOST_MIN_VER "1.54.0") # Minimum
# Prevent accidental building with DB v5, which isn't compatible with wallets built with DB v6
IF(WITH_INCOMPATIBLE_BDB)
  set(BERKELEYDB_MIN_VER "5.0.0") # Minimum
ELSE()
  set(BERKELEYDB_MIN_VER "6.0.0") # Minimum
ENDIF()

# Adds our custom find_package modules to the list of modules available for cmake
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)

<<<<<<< HEAD
# Start of finding dependencies
find_package(OpenSSL ${OPENSSL_MIN_VER} EXACT REQUIRED)
# Windows isn't POSIX
IF(NOT (CMAKE_SYSTEM_NAME MATCHES "Windows"))
=======
# Start of finding dependencies...
find_package(OpenSSL ${OPENSSL_MIN_VER} REQUIRED)
# TODO: Max 1.0.2 allowed at the moment. Remove this when 1.1.x is in master branch
IF(OPENSSL_VERSION VERSION_GREATER ${OPENSSL_MAX_VER})
  message(FATAL_ERROR "OpenSSL v${OPENSSL_VERSION} was found, but a maximum of v${OPENSSL_MAX_VER} is compatible.")
ENDIF()

IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
  message(STATUS "Windows system detected, turning off pthreads flag.")
  # Don't use pthreads on non-POSIX Windows
  set(THREADS_PREFER_PTHREAD_FLAG OFF)
ELSE()
  message(STATUS "Non-Windows system detected, turning on pthreads flag.")
>>>>>>> 5fbd9dc... Change OpenSSL min ver to 1.0.1, remove unnecessary PPA
  # Tells find_package(Threads) to get pthread.h & use -lpthread compile flag
  set(THREADS_PREFER_PTHREAD_FLAG ON)
ENDIF()

find_package(Threads REQUIRED)
find_package(Boost ${BOOST_MIN_VER} REQUIRED COMPONENTS system)
find_package(BerkeleyDB ${BERKELEYDB_MIN_VER} REQUIRED)

# Throw a warning if the user has DB ver < 6 but continue building
IF(BERKELEYDB_VERSION VERSION_LESS "6.0.0")
  message(WARNING "Pre-existing wallet data is not backwards compatible with version v5 of Berkeley DB if it was originally built with v6. \
    Read \"docs/BUILDING.md\" for more info.")
ENDIF()

# Initial setting of compiler definitions
# I believe this makes the binary 64-bit only, which should be noted somewhere...
set(_definitions "-D_FILE_OFFSET_BITS=64")

IF(CMAKE_BUILD_TYPE STREQUAL "Release")
  message(STATUS "Setting build flag for \"Release\" build-type...")
  list(APPEND _definitions "-DNDEBUG")
ENDIF()

# Adds compile definitions for the detected compiler
# MSVC compiler
IF(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  message(STATUS "Setting build flags for MSVC compiler...")
  # Maybe WIN32_WINNT should be handled better?
  # The number changes across platform versions, which might (does?) result in lost performance when forcing a WinXP compile.
  list(APPEND _definitions
    "-D_WIN32_WINNT=0x0501"
    "-D_UNICODE -DUNICODE"
    "-D_SCL_SECURE_NO_DEPRECATE"
    "-D_CRT_SECURE_NO_DEPRECATE"
  )
# Clang/AppleClang compiler
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "Clang") # MATCHES Clang and AppleClang
  message(STATUS "Setting build flags for Clang compiler...")
  list(APPEND _definitions "-DBOOST_NO_CXX11_NUMERIC_LIMITS")
# GCC compiler
ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  message(STATUS "Setting build flags for GCC compiler...")
  list(APPEND _definitions "-O2")
ENDIF()

# Set all our various definitions
message(STATUS "List of build definitions to be used (delimited by semi-colon): ${_definitions}")
add_definitions(${_definitions})

# "STATIC libraries are archives of object files for use when linking other targets."
# Libcoin
add_library(coin STATIC
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/account.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/accounting_entry.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/address.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/address_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/alert.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/alert_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/alert_unsigned.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/base58.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/big_number.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/blake256.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/block.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/block_index.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/block_index_disk.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/block_locator.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/block_merkle.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/chainblender_broadcast.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/chainblender.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/chainblender_join.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/chainblender_leave.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/chainblender_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/chainblender_status.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/checkpoints.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/checkpoint_sync.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/checkpoint_sync_unsigned.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/configuration.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/crypter.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/database_stack.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/db.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/db_env.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/db_tx_bdb.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/db_tx.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/db_tx_ldb.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/db_wallet.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/ecdhe.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/file.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/filesystem.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/gateway.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/globals.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/hash.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/hc256.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/hd_configuration.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/hd_ecdsa.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/hd_keychain.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/http_transport.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/incentive_answer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/incentive_collaterals.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/incentive.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/incentive_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/incentive_question.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/incentive_sync.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/incentive_vote.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/inventory_vector.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/kernel.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key_pool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key_public.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key_reserved.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key_store_basic.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key_store_crypto.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key_wallet.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/key_wallet_master.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/merkle_tree_partial.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/message.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/mining.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/mining_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/nat_pmp_client.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/nat_pmp.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/pbkdf2.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/point_in.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/point_out.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/reward.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/ripemd160.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/rpc_connection.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/rpc_json_parser.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/rpc_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/rpc_server.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/rpc_transport.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/script_checker.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/script_checker_queue.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/script.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/secret.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/sha256.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/signature_cache.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/stack.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/stack_impl.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/status_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/tcp_acceptor.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/tcp_connection.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/tcp_connection_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/tcp_transport.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_bloom_filter.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_in.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_index.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_merkle.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_out.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_pool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_position.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/transaction_wallet.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/upnp_client.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/utility.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/wallet.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/wallet_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/whirlpool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/zerotime_answer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/zerotime.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/zerotime_lock.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/zerotime_manager.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/zerotime_question.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/coin/src/zerotime_vote.cpp
)
# Libdatabase
add_library(database STATIC
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/block.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/broadcast_operation.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/compression.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/ecdhe.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/entry.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/find_operation.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/hc256.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/key_pool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/message.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/node.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/node_impl.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/operation.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/operation_queue.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/ping_operation.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/query.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/routing_table.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/rpc.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/slot.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/stack.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/stack_impl.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/storage.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/store_operation.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/udp_handler.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/udp_multiplexor.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database/src/whirlpool.cpp
)

# "If your source files and your headers include the headers of another library, then it is a PUBLIC dependency."
# "If your header files but not your source files include the headers of another library, then it is an INTERFACE dependency."
target_include_directories(coin
  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/coin/include
  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/database/include
  PUBLIC ${Boost_INCLUDE_DIRS}
  PUBLIC ${OPENSSL_INCLUDE_DIR}
  INTERFACE ${BERKELEYDB_INCLUDE_DIRS}
)

target_include_directories(database
  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/database/include
  PUBLIC ${Boost_INCLUDE_DIRS}
  PUBLIC ${OPENSSL_INCLUDE_DIR}
)

add_executable(vcashd ${CMAKE_CURRENT_SOURCE_DIR}/coin/test/main.cpp)

target_link_libraries(vcashd coin database ${BERKELEYDB_LIBRARIES} ${OPENSSL_LIBRARIES} ${Boost_LIBRARIES} Threads::Threads)

# Check for user-provided install/bin/lib paths
IF(CMAKE_INSTALL_PREFIX AND CMAKE_INSTALL_BINDIR AND CMAKE_INSTALL_LIBDIR)
  message(STATUS "Provided installation paths found, setting them now...")
  install(TARGETS vcashd database coin
    RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}"
    LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}"
    ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}"
  )
ELSE()
  message(STATUS "No installation paths provided, so the default paths will be used.")
  # Note that bin and lib are not OS-specifc, but generic names used by cmake
  install(TARGETS vcashd database coin
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
  )
ENDIF()

# Consider adding the following functions..
# add_test https://cmake.org/cmake/help/latest/command/add_test.html If added, then TravisCI needs `make test` added to `.travis.yml`
# export https://cmake.org/cmake/help/latest/command/export.html Makes it easy for external CMake projects to import Vcash
